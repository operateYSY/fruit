317102070160
317102070137
317102070110

数据类型：1、基本数据类型：8种（值赋值，有默认值）
	 2、引用数据类型：包装类（地址赋值）

装箱：基本数据类型变为包装类型        
拆箱：
都是自动完成

访问修饰符(public、protected、private)

运算符：最高的（）；最低的是赋值语句

循环：for、foreach、while、dowhile
嵌套：if、ifelse、switch..case

接口与抽象类的主要区别：
      接口方法一般来说是不可实现的 就是所谓的抽象方法 所以接口里面的方法默认都是public abstract修饰的。但是抽象类 他里面的方法可以是抽象方法也可以不是抽象方法。抽象类当中定义的属性 就跟我们一般类是一样的。但是接口不一样 里面的属性必须是常量 默认是public static final 修饰的
      第三 就是一个关系的问题 抽象类与子类一般直接是有关联关系的 而且继承嘛 必须是单继承
而接口与实现类之间可以没有任何的关系 接口能多实现 所以变相实现了多继承（一次继承多个，就是有多个父类）

一、123456
二、3456（1234）
三、1234               （不讲课）
四、1234
五、1234                （可能讲两节）

用序列化写，不用字符流
compareble接口，treeset

35（35） 3（10 10 15=35）（110minute）
1（30）（40minute）
javase jdbc 日期 日历 math 
多线程不考 tcp网络编程不考 枚举 反射、死锁
package sqlconnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.mysql.jdbc.PreparedStatement;

class connect{
	//第一步 加载驱动
	//第二步 创建连接
	//第三步 创建执行器statement或者是预编译器（preparedstatement）
	//第四步 创建SQL语句
	//第五步 执行调用execute方法或者是executeQuery方法
	//第六步（可选）遍历
	//第七步 关闭ResultSet，Statement，Connection 
	static {
		//加载驱动
		try{
			Class.forName("com.mysql.jdbc.Driver");
		}
	catch (ClassNotFoundException e) {
		// TODO: handle exception
		e.printStackTrace();
	}	
	}
	public static void main(String[] args) throws ClassNotFoundException, SQLException{
		//创建连接
		Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/qwer?useSSl=false", "root", "3306");
		/*//创建执行器
		Statement st=connection.createStatement();*/
		//sql语句
		String sql="insert into qw(name) value(?)";
		//创建预编译器
		java.sql.PreparedStatement ps=connection.prepareStatement(sql);
		ps.setString(1, "xiaxiao");
		//创建SQL语句
		//String sql="select *from qw";
		//执行
	/*	ResultSet set=ps.executeQuery(sql);
		while(set.next()){
			//set.getString(1),写字段名和下标都可以
			System.out.println(set.getString("id")+": "+set.getString("name"));
		}*/
		/*int num=st.executeUpdate(sql);
		System.out.println(num);*/
		//关闭
		//set.close();
		int num=ps.executeUpdate();
		ps.close();
		connection.close();
		//select t.name,b.type from qw as t inner(left,right) join er as b on b.id=t.type.id;
	}
	}
通过控制台输入到数据库
public static void add() {
		System.out.println("请输入宠物姓名：");
		String name = sc.next();
		System.out.println("请输入宠物状态：");
		String state = sc.next();
		String sql = "INSERT INTO t_pet(name,state) VALUES (?,?)";
		PreparedStatement pstmt;
		pstmt = JDBCUtil.getInstance().getPreparedStatement(sql);
		try {
			pstmt.setString(1, name);
			pstmt.setString(2, state);
			pstmt.executeUpdate();
			JDBCUtil.getInstance().closeDBResources();
			System.out.println("添加成功");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
任何类型与String类型拼接，都会变成String
构造方法是为了生成对象
a.equals.(b);比较值和类型
==;比较值和地址

使用EL表达式必须要提供封装的思想，公开的set，get方法

使用mybatis实现增删查改（数据库），然后用aop加一个后置增强

春节学期5.1号
1.10放假
1111111q
ssm框架dao层不用注解写xml
ssm框架中：页面调用Controller->Service->Dao。从上至下的传递方式。

ssm、severlet+jsp+jstl+El表达式(一题有数据库)
死锁
js、jquery的jar 多线程、单例和工厂模式
@controller
把这个类作为javabean的一个组件，并到spring容器中

spring创建javabean
表单是post请求
文档（表格）、ppt、视频、项目代码+数据库

总结tanx-sinx等





adminCtroller
	/**
	 * 订单发货
	 * 
	 * @return
	 */
	@RequestMapping("/orderDispose")
	public String orderDispose(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.dispose(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}
	
	/**
	 * 订单完成
	 * 
	 * @return
	 */
	@RequestMapping("/orderFinish")
	public String orderFinish(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.finish(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}

	/**
	 * 订单删除
	 * 
	 * @return
	 */
	@RequestMapping("/orderDelete")
	public String orderDelete(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.delete(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}

	/**
	 * 顾客管理
	 * 
	 * @return
	 */
	@RequestMapping("/userList")
	public String userList(HttpServletRequest request,
			@RequestParam(required=false, defaultValue="1") int page) {
		request.setAttribute("flag", 2);
		request.setAttribute("userList", userService.getList(page, rows));
		request.setAttribute("pageTool", PageDivide.getPageTool(request, userService.getTotal(), page, rows));
		return "/admin/customer-list.jsp";
	}
	
	/**
	 * 订单列表
	 * 
	 * @return
	 */
	@RequestMapping("/orderList")
	public String orderList(@RequestParam(required=false, defaultValue="0")byte status, HttpServletRequest request,
			@RequestParam(required=false, defaultValue="1") int page) {
		request.setAttribute("flag", 1);
		request.setAttribute("status", status);
		request.setAttribute("orderList", orderService.getList(status, page, rows));
		request.setAttribute("pageTool", PageDivide.getPageTool(request, orderService.getTotal(status), page, rows));
		return "/admin/order-list.jsp";
	}
	
	/**
	 * 订单列表
	 * 
	 * @return
	 */
	@RequestMapping("/orderSearch")
	public String orderSearch(@RequestParam(required=false, defaultValue="0")int id, HttpServletRequest request) {
		if(id > 0) {
			request.setAttribute("flag", 1);
			request.setAttribute("orderList", orderService.getListById(id));
			return "/admin/order-list.jsp";
		}else {
			return "redirect:/admin/orderList";
		}
	}

	/**
	 * 订单发货
	 * 
	 * @return
	 */
	@RequestMapping("/orderDispose")
	public String orderDispose(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.dispose(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}
	
	/**
	 * 订单完成
	 * 
	 * @return
	 */
	@RequestMapping("/orderFinish")
	public String orderFinish(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.finish(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}

	/**
	 * 订单删除
	 * 
	 * @return
	 */
	@RequestMapping("/orderDelete")
	public String orderDelete(int id, byte status,
			@RequestParam(required=false, defaultValue="1") int page) {
		orderService.delete(id);
		return "redirect:orderList?flag=1&status="+status+"&page="+page;
	}

	/**
	 * 顾客管理
	 * 
	 * @return
	 */
	@RequestMapping("/userList")
	public String userList(HttpServletRequest request,
			@RequestParam(required=false, defaultValue="1") int page) {
		request.setAttribute("flag", 2);
		request.setAttribute("userList", userService.getList(page, rows));
		request.setAttribute("pageTool", PageDivide.getPageTool(request, userService.getTotal(), page, rows));
		return "/admin/customer-list.jsp";
	}
	
	/**
	 * 通过名称搜索列表
	 * 
	 * @return
	 */
	@RequestMapping("/userSearch")
	public String userSearch(String name, HttpServletRequest request) {
		request.setAttribute("flag", 2);
		request.setAttribute("userList", userService.getListByName(name));
		return "/admin/customer-list.jsp";
	}

	/**
	 * 顾客添加
	 * 
	 * @return
	 */
	@RequestMapping("/userAdd")
	public String userAdd(HttpServletRequest request) {
		request.setAttribute("flag", 2);
		return "/admin/customer-add.jsp";
	}

	/**
	 * 顾客添加
	 * 
	 * @return
	 */
	@RequestMapping("/userSave")
	public String userSave(Users user, HttpServletRequest request, 
			@RequestParam(required=false, defaultValue="1") int page) {
		if (userService.isExist(user.getUsername())) {
			request.setAttribute("msg", "用户名已存在!");
			return "/admin/customer-add.jsp";
		}
		userService.add(user);
		return "redirect:userList?flag=2&page="+page;
	}

	/**
	 * 顾客密码重置页面
	 * 
	 * @return
	 */
	@RequestMapping("/userRe")
	public String userRe(int id, HttpServletRequest request) {
		request.setAttribute("flag", 2);
		request.setAttribute("user", userService.get(id));
		return "/admin/customer-change.jsp";
	}

	/**
	 * 顾客密码重置
	 * 
	 * @return
	 */
	@RequestMapping("/userReset")
	public String userReset(Users user, 
			@RequestParam(required=false, defaultValue="1") int page) {
		String password = SafeDivide.encode(user.getPassword());
		user = userService.get(user.getId());
		user.setPassword(password);
		userService.update(user);
		return "redirect:userList?flag=2&page="+page;
	}

	/**
	 * 顾客更新
	 * 
	 * @return
	 */
	@RequestMapping("/userEdit")
	public String userEdit(int id, HttpServletRequest request) {
		request.setAttribute("flag", 2);
		request.setAttribute("user", userService.get(id));
		return "/admin/admin-edit.jsp";
	}

	/**
	 * 顾客更新
	 * 
	 * @return
	 */
	@RequestMapping("/userUpdate")
	public String userUpdate(Users user, 
			@RequestParam(required=false, defaultValue="1") int page) {
		userService.update(user);
		return "redirect:userList?flag=2&page="+page;
	}

	/**
	 * 顾客删除
	 * 
	 * @return
	 */
	@RequestMapping("/userDelete")
	public String userDelete(Users user, 
			@RequestParam(required=false, defaultValue="1") int page) {
		userService.delete(user);
		return "redirect:userList?flag=2&page="+page;
	}

	/**
	 * 产品列表
	 * 
	 * @return
	 */
	@RequestMapping("/goodList")
	public String goodList(@RequestParam(required=false, defaultValue="0")byte status, HttpServletRequest request, 
			@RequestParam(required=false, defaultValue="1") int page) {
		request.setAttribute("flag", 3);
		request.setAttribute("page", page);
		request.setAttribute("status", status);
		request.setAttribute("goodList", goodService.getList(status, page, rows));
		request.setAttribute("pageTool", PageDivide.getPageTool(request, goodService.getTotal(status), page, rows));
		return "/admin/fruit-list.jsp";
	}
	
	/**
	 * 通过名称获取列表
	 * 
	 * @return
	 */
	@RequestMapping("/goodSearch")
	public String goodSearch(String name, HttpServletRequest request, 
			@RequestParam(required=false, defaultValue="1") int page) {
		request.setAttribute("flag", 3);
		request.setAttribute("goodList", goodService.getListByName(name, page, rows));
		request.setAttribute("pageTool", PageDivide.getPageTool(request, goodService.getTotalByName(name), page, rows));
		return "/admin/fruit-list.jsp";
	}

